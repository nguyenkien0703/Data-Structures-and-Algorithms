/*
DÃY CON TĂNG DẦN BẬC K

Bài làm tốt nhất
Cho dãy gồm N số phân biệt AN = {a1, a2, .., aN } và số tự nhiên K (K<=N<=100). Ta gọi một dãy con tăng dần bậc K của dãy số AN là một dãy các số gồm K phần tử trong dãy đó thỏa mãn tính chất tăng dần. Bài toán được đặt ra là in ra màn hình  số các dãy con tăng dần bậc K của dãy số AN. Ví dụ :

Input:  5    3

2    5    15   10    20  

Dòng đầu tiên ghi lại hai số N và K tương ứng với số phần tử của dãy số và bậc của dãy con.
Dòng kế tiếp : N số của dãy số AN, các số trong dãy không lớn hơn 100. 
thì Output : 7 (số các dãy con tăng dần bậc 3 của dãy số AN)
*/


#include <bits/stdc++.h>
using namespace std;

#define ll long long
#define ull unsigned long long
#define pii pair<ll, ll> 
#define vii vector<pii> 
#define pb push_back 
#define fi first 
#define el cout<<endl
#define oo 1000000008
#define se second 
#define sz(a) a.size();
#define all(x) (x).begin(), (x).end()
#define vll vector<ll> 
#define vi vector<int >
template<class T> bool ckmin(T& a, const T& b) { return b < a ? a = b, 1 : 0; }
template<class T> bool ckmax(T& a, const T& b) { return a < b ? a = b, 1 : 0; }
#define f0(a) for(ll i = 0; i < (a); i++)
#define f1(a) for(ll i = 1; i <= (a); i++)
#define ms(a,n) memset(a,n,sizeof(a))
#define FOR(i,a,b) for(ll i=a;i<=b;i++)
#define FOD(i,b,a) for(int i=b;i>=a;i--)
#define faster ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
const ll MOD = 1e9 + 7;

ll n, k;
ll ans = 0;
    ll a[10000];
    // bài này cứ chạy stack đi sẽ rõ 
void Try(ll i, int cnt =0){
    for (int j = i + 1; j <= n;j++){
        if(a[j] > a[i]){
            ++cnt;
            if(cnt ==k){
                ++ans;
            }
            Try(j, cnt);
            --cnt;
        }
    }
}
void solve(){
    cin >> n >> k;
    for (int i = 1; i <= n;i++){
        cin >> a[i];
    }
    Try(0);
    cout << ans;
    el;
}
int main()
{
    
    faster;
    int t =1;
    // cin>> t ;
    while(t--){
        solve();
    }
    

}
